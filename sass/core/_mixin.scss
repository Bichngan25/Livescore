//  MIXINS
// laptop lon, screen <= 1440px (tuy theo yeu cau thiet ke)
@mixin lg {
  @media screen and (max-width: 1440px) {
      @content;
  }
}

// laptop nho hoac tablet lon, screen <1200px
@mixin md {
  @media screen and (max-width: 1199.980px) {
      @content;
  }
}

// tablet vua, screen <= 992px
@mixin sm {
  @media screen and (max-width: 991.98px) {
      @content;
  }
}

// tablet nho hoac phone quay ngang, screen < 768px
@mixin xs {
  @media screen and (max-width: 767.98px) {
      @content;
  }
}

// phone lon, screen < 576px
@mixin xxs {
  @media screen and (max-width: 575.98px) {
      @content;
  }
}

// phones nho, screen < 376px - tuy theo yeu cau
@mixin xxxs {
  @media screen and (max-width: 375.98px) {
      @content;
  }
}

// landscape
@mixin lg {
  @media screen and (orientation: landscape) {
      @content;
  }
}

// media max , min
@mixin maxW($args){
  @media (max-width: $args){
      @content;
  }
}
@mixin minW($args){
  @media (min-width: $args){
      @content;
  }
}
@mixin maxH($args){
  @media (max-height: $args){
      @content;
  }
}
@mixin minH($args){
  @media (min-height: $args){
      @content;
  }
}

// CSS Animation - Transition
@mixin keyframes($animation-name){
  @-webkit-keyframes #{$animation-name}{
      @content;
  }
  @-moz-keyframes #{$animation-name}{
      @content;
  }
  @-ms-keyframes #{$animation-name}{
      @content;
  }
  @-o-keyframes #{$animation-name}{
      @content;
  }
  @keyframes #{$animation-name}{
      @content;
  }
}

@mixin animation($str) {
  animation: #{$str};
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
}
@mixin animation-delay($str) {
  animation-delay: #{$str};
  -webkit-animation-delay: #{$str};
  -moz-animation-delay: #{$str};
  -ms-animation-delay: #{$str};
  -o-animation-delay: #{$str};
}
@mixin transform($args){
  transform: $args;
  -webkit-transform: $args;
  -moz-transform: $args;
  -ms-transform: $args;
  -o-transform: $args;
}
@mixin transform-origin($args){
  transform-origin: $args;
  -webkit-transform-origin: $args;
  -moz-transform-origin: $args;
  -ms-transform-origin: $args;
  -o-transform-origin: $args;
}
@mixin transition($args) {
  transition: $args;
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
}
@mixin transition-delay($args) {
  transition-delay: $args;
  -webkit-transition-delay: $args;
  -moz-transition-delay: $args;
  -ms-transition-delay: $args;
  -o-transition-delay: $args;
}

// CSS text
@mixin text($font-family, $font-size, $line-height, $color, $text-transform:none) {
  font-family: $font-family;
  font-size: $font-size;
  line-height: $line-height;
  color: $color;
  text-transform: $text-transform;
}

// Middle Object
@mixin mid($flex: false) {
  @if $flex == false {
      top: 50%;
      left: 50%;
      @include transform(translate(-50%,-50%));
      position: absolute;
  }
  @else{
      display: flex;
      align-items: center;
      justify-content: center;
  }
}

// Middle Img
@mixin midimg {
  width: 100%;
  height: 100%;
  object-fit: cover;
  position: absolute;
  @include mid;
}

// FullScreen
@mixin fullscreen($fixed: false) {
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  @if $fixed {
      position: fixed;
  }@else{
      position: absolute;
  }
}

// visible
@mixin visible($param: 1) {
@if $param == 1 {
  opacity: 1;
  pointer-events: auto;
} @else {
  opacity: 0;
  pointer-events: none;
}
}

// Border Radius
@mixin br($radius) {
  border-radius: $radius;
  background-clip: padding-box;
}

// Size Div
@mixin size($w, $h: $w,$circle: false){
  width: $w;
  height: $h;
  @if $circle {
      border-radius: 100%;
  }
}

// Overflow Text Dots
@mixin overtext($lines){
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  text-overflow: ellipsis;
  overflow: hidden;
}

// Customize Scrall Bar
@mixin customscroll($width: 5px, $bdTrack: #ddd, $bgThumb: #121212){
  &::-webkit-scrollbar {
      width: $width;
  }
  &::-webkit-scrollbar-track {
      background: transparent;
  }
  &::-webkit-scrollbar-thumb {
      background: $bgThumb;
  }
}



// ///-------.....-------- ////

@mixin bgc($bg: red) {
  background-color: $bg;
}

@mixin size($w, $h: $w) {
  width: $w;
  height: $h;
}

@mixin scrollsnap($auto-column: 0, $gap: 0, $display: block) {
  display: grid;
  justify-content: flex-start;
  grid-auto-columns: $auto-column;
  grid-auto-flow: column;
  grid-gap: $gap;
  overflow: auto;
  overflow-y: hidden;
  -ms-scroll-snap-type: x mandatory;
  scroll-snap-type: x mandatory;
  scroll-snap-stop: always;
  touch-action: manipulation;
  -webkit-overflow-scrolling: touch;
  grid-template-columns: unset;
  &::-webkit-scrollbar {
    width: 1em;
    height: 5px;
    display: $display;
  }
  &::-webkit-scrollbar-track {
    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
    border-radius: 4px;
  }
  &::-webkit-scrollbar-thumb {
    background-color: red;
  }
  & > * {
    scroll-snap-align: start;
  }
}

@mixin lineClamp($lc: 1) {
  display: -webkit-box;
  -webkit-line-clamp: $lc;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  word-break: break-word;
}

@mixin flexbox($config: ()) {
  $config: extend(
    (
      align-items: stretch,
      justify-content: flex-start,
      flex-direction: row,
      display: flex,
      flex-wrap: nowrap,
    ),
    $config
  );
  display: map-get($config, display);
  align-items: map-get($config, align-items);
  justify-content: map-get($config, justify-content);
  flex-direction: map-get($config, flex-direction);
  flex-wrap: map-get($config, flex-wrap);
}

@mixin blockCenter($set: "left") {
  position: absolute;
  // Trường hợp canh ngang
  @if $set == "left" {
    left: 50%;
    transform: translateX(-50%);
  }
  //Trường hợp canh dọc
  @if $set == "top" {
    top: 50%;
    transform: translateY(-50%);
  }
  //Trường hợp cả 2 ngang và dọc
  @if $set == "both" {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

// Responsive screen PC Mobile
@mixin maxWidth($breakpoint) {
  @media only screen and (max-width: $breakpoint) {
    @content;
  }
}

@mixin minWidth($breakpoint) {
  @media only screen and (min-width: $breakpoint) {
    @content;
  }
}

@mixin minMaxWidth($min, $max) {
  @media only screen and (min-width: $min) and (max-width: $max) {
    @content;
  }
}



